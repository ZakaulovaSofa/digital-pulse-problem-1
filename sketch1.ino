#include <ESP8266WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include <ArduinoJson.h>

// –ü–∏–Ω—ã –¥–ª—è RGB, –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∏ –∫–Ω–æ–ø–∫–∏
const int micPin = A0;
const int buttonPin = 14;  // D5 –Ω–∞ ESP8266
const int redPin = 5;      // D1
const int greenPin = 4;    // D2
const int bluePin = 0;     // D3

// –ü–æ—Ä–æ–≥ –∑–≤—É–∫–∞ (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥ –≤–∞—à –º–∏–∫—Ä–æ—Ñ–æ–Ω)
const int soundThreshold = 39; // –ò–∑–º–µ–Ω–∏–ª –ø–æ—Ä–æ–≥ –Ω–∞ 50 –ø–æ –≤–∞—à–µ–º—É —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
const unsigned long monitoringDuration = 20000;  // 20 —Å–µ–∫—É–Ω–¥
const unsigned long longSoundThreshold = 2000;   // 2 —Å–µ–∫—É–Ω–¥—ã (–ø–æ –≤–∞—à–µ–º—É —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é)

bool isMonitoring = false;
bool isBroken = false; // –§–ª–∞–≥ –ø–æ–ª–æ–º–∫–∏
unsigned long monitoringStartTime = 0;
unsigned long soundStartTime = 0;
bool soundDetected = false;

void setup() {
  Serial.begin(115200);
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏–Ω–æ–≤
  pinMode(redPin, OUTPUT);
  pinMode(greenPin, OUTPUT);
  pinMode(bluePin, OUTPUT);
  pinMode(buttonPin, INPUT_PULLUP);  // –ö–Ω–æ–ø–∫–∞ —Å –ø–æ–¥—Ç—è–∂–∫–æ–π –∫ VCC
  
  setColor(0, 0, 255);  // –ò—Å—Ö–æ–¥–Ω—ã–π —Ü–≤–µ—Ç - —Å–∏–Ω–∏–π
}

void loop() {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ (—Å –∞–Ω—Ç–∏–¥—Ä–µ–±–µ–∑–≥–æ–º)
  if (digitalRead(buttonPin) == LOW && !isMonitoring && !isBroken) {
    delay(50);  // –ê–Ω—Ç–∏–¥—Ä–µ–±–µ–∑–≥
    if (digitalRead(buttonPin) == LOW) {
      startMonitoring();
    }
  }

  // –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ª–æ–º–∫–∞ - –º–∏–≥–∞–µ–º –∫—Ä–∞—Å–Ω—ã–º
  if (isBroken) {
    blinkRed();
    return; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  }

  // –ï—Å–ª–∏ –∏–¥—ë—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  if (isMonitoring) {
    unsigned long currentTime = millis();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    if (currentTime - monitoringStartTime >= monitoringDuration) {
      stopMonitoring();
      return;
    }

    // –ß—Ç–µ–Ω–∏–µ –∑–≤—É–∫–∞
    int soundValue = analogRead(micPin);
    Serial.print("–í—Ä–µ–º—è: ");
    Serial.print((currentTime - monitoringStartTime) / 1000);
    Serial.print("—Å | –£—Ä–æ–≤–µ–Ω—å –∑–≤—É–∫–∞: ");
    Serial.println(soundValue);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞
    if (soundValue > soundThreshold) {
      if (!soundDetected) {
        soundDetected = true;
        soundStartTime = currentTime;
      } else {
        // –ï—Å–ª–∏ –∑–≤—É–∫ –¥–ª–∏—Ç—Å—è –¥–æ–ª—å—à–µ 2 —Å–µ–∫—É–Ω–¥
        if (currentTime - soundStartTime >= longSoundThreshold) {
          Serial.println("‚ö†Ô∏è –ü–æ–ª–æ–º–∫–∞! –î–æ–ª–≥–∏–π –∑–≤—É–∫ (>2 —Å–µ–∫)");
          triggerBrokenState();
          return; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        }
      }
    } else {
      soundDetected = false;
    }
    
    // –í–æ –≤—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥–æ—Ä–∏–º –∑–µ–ª—ë–Ω—ã–º
    setColor(0, 255, 0);
    delay(1000);  // –£–º–µ–Ω—å—à–∏–ª –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  }
}

void startMonitoring() {
  Serial.println("üöÄ –ù–∞—á–∞–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–≤—É–∫–∞ (20 —Å–µ–∫)");
  isMonitoring = true;
  isBroken = false;
  monitoringStartTime = millis();
  setColor(0, 255, 0);  // –ó–µ–ª—ë–Ω—ã–π (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)
}

void stopMonitoring() {
  Serial.println("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω");
  isMonitoring = false;
  soundDetected = false;
  setColor(0, 0, 255);  // –°–∏–Ω–∏–π (–æ–∂–∏–¥–∞–Ω–∏–µ)
}

void triggerBrokenState() {
  isBroken = true;
  isMonitoring = false;
  Serial.println("‚ÄºÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ª–æ–º–∫–∞! –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
}

void blinkRed() {
  static unsigned long lastBlinkTime = 0;
  static bool ledState = false;
  
  if (millis() - lastBlinkTime >= 500) { // –ú–∏–≥–∞–µ–º –∫–∞–∂–¥—ã–µ 500–º—Å
    ledState = !ledState;
    if (ledState) {
      setColor(255, 0, 0); // –ö—Ä–∞—Å–Ω—ã–π
    } else {
      setColor(0, 0, 0);   // –í—ã–∫–ª—é—á–µ–Ω–æ
    }
    lastBlinkTime = millis();
  }
}

// –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–≤–µ—Ç–∞ RGB
void setColor(int red, int green, int blue) {
  analogWrite(redPin, red);
  analogWrite(greenPin, green);
  analogWrite(bluePin, blue);
}