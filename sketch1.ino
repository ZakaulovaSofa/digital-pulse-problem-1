#include <ESP8266WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include <ArduinoJson.h>
#include <DHT.h>

// –ü–∏–Ω—ã –¥–ª—è RGB, –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∏ –∫–Ω–æ–ø–∫–∏
const int micPin = A0;
const int buttonPin = 14;  // D5 –Ω–∞ ESP8266
const int redPin = 5;      // D1
const int greenPin = 4;    // D2
const int bluePin = 0;     // D3
const int dhtPin = 12;     // D6 –¥–ª—è DHT11

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–∞—Ç—á–∏–∫–∞ DHT
#define DHTTYPE DHT11
DHT dht(dhtPin, DHTTYPE);

// –ü–æ—Ä–æ–≥–∏
const int soundThreshold = 39; // –ü–æ—Ä–æ–≥ –∑–≤—É–∫–∞
const int moistureThreshold = 30; // –ü–æ—Ä–æ–≥ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
const unsigned long soundDurationThreshold = 100; // 0.1 —Å–µ–∫—É–Ω–¥—ã –∑–≤—É–∫–∞
const unsigned long moistureCheckDuration = 10000; // 10 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
const unsigned long monitoringDuration = 20000;  // 20 —Å–µ–∫—É–Ω–¥ –æ–±—â–µ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
const unsigned long measurementInterval = 1000;  // –ò–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–º–µ—Ä–æ–≤ 1 —Å–µ–∫—É–Ω–¥–∞

// –°–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
enum SystemState { IDLE, MONITORING, SOUND_DETECTED, CHECKING_MOISTURE, BROKEN };
SystemState systemState = IDLE;

// –¢–∞–π–º–µ—Ä—ã
unsigned long monitoringStartTime = 0;
unsigned long soundStartTime = 0;
unsigned long moistureCheckStartTime = 0;

void setup() {
  Serial.begin(115200);
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏–Ω–æ–≤
  pinMode(redPin, OUTPUT);
  pinMode(greenPin, OUTPUT);
  pinMode(bluePin, OUTPUT);
  pinMode(buttonPin, INPUT_PULLUP);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DHT11
  dht.begin();
  
  setColor(0, 0, 255);  // –ò—Å—Ö–æ–¥–Ω—ã–π —Ü–≤–µ—Ç - —Å–∏–Ω–∏–π (–æ–∂–∏–¥–∞–Ω–∏–µ)
}

void loop() {
  unsigned long currentTime = millis();

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
  switch (systemState) {
    case IDLE:
      handleIdleState();
      break;
      
    case MONITORING:
      handleMonitoringState(currentTime);
      break;
      
    case SOUND_DETECTED:
      handleSoundDetectedState(currentTime);
      break;
      
    case CHECKING_MOISTURE:
      handleMoistureCheckState(currentTime);
      break;
      
    case BROKEN:
      handleBrokenState();
      break;
  }
  
  delay(100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
}

void handleIdleState() {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ (—Å –∞–Ω—Ç–∏–¥—Ä–µ–±–µ–∑–≥–æ–º)
  if (digitalRead(buttonPin) == LOW) {
    delay(50);
    if (digitalRead(buttonPin) == LOW) {
      startMonitoring();
    }
  }
}

void handleMonitoringState(unsigned long currentTime) {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  if (currentTime - monitoringStartTime >= monitoringDuration) {
    stopMonitoring();
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–≤—É–∫–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
  static unsigned long lastSoundCheck = 0;
  if (currentTime - lastSoundCheck >= measurementInterval) {
    lastSoundCheck = currentTime;
    
    int soundValue = analogRead(micPin);
    Serial.print("–í—Ä–µ–º—è: ");
    Serial.print((currentTime - monitoringStartTime) / 1000);
    Serial.print("—Å | –£—Ä–æ–≤–µ–Ω—å –∑–≤—É–∫–∞: ");
    Serial.println(soundValue);

    if (soundValue > soundThreshold) {
      if (systemState == MONITORING) {
        systemState = SOUND_DETECTED;
        soundStartTime = currentTime;
        Serial.println("üîä –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–≤—É–∫ –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞");
      }
    }
  }

  setColor(0, 255, 0);  // –ó–µ–ª—ë–Ω—ã–π (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)
}

void handleSoundDetectedState(unsigned long currentTime) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –ª–∏ –∑–≤—É–∫
  int soundValue = analogRead(micPin);
  
  if (soundValue > soundThreshold) {
    Serial.println(currentTime - soundStartTime);
    if (currentTime - soundStartTime >= soundDurationThreshold) {
      Serial.println("üîî –ó–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω, –Ω–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤–ª–∞–∂–Ω–æ—Å—Ç–∏");
      systemState = CHECKING_MOISTURE;
      moistureCheckStartTime = currentTime;
      setColor(255, 165, 0); // –û—Ä–∞–Ω–∂–µ–≤—ã–π (–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏)
    }
  } else {
    // –ó–≤—É–∫ –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª—Å—è –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞
    systemState = MONITORING;
    Serial.println("üîá –ó–≤—É–∫ –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª—Å—è");
  }
}

void handleMoistureCheckState(unsigned long currentTime) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–∂–Ω–æ—Å—Ç—å –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
  static unsigned long lastMoistureCheck = 0;
  if (currentTime - lastMoistureCheck >= measurementInterval) {
    lastMoistureCheck = currentTime;
    
    float humidity = dht.readHumidity();
    float temperature = dht.readTemperature();
    
    if (isnan(humidity) || isnan(temperature)) {
      Serial.println("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞ DHT!");
    } else {
      Serial.print("–í–ª–∞–∂–Ω–æ—Å—Ç—å: ");
      Serial.print(humidity);
      Serial.print("% | –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ");
      Serial.print(temperature);
      Serial.println("¬∞C");
      
      if (humidity > moistureThreshold) {
        triggerBrokenState();
        return;
      }
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
  if (currentTime - moistureCheckStartTime >= moistureCheckDuration) {
    Serial.println("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ");
    systemState = MONITORING;
  }
}

void handleBrokenState() {
  // –ú–∏–≥–∞–µ–º –∫—Ä–∞—Å–Ω—ã–º –ø—Ä–∏ –ø–æ–ª–æ–º–∫–µ
  static unsigned long lastBlinkTime = 0;
  static bool ledState = false;
  
  if (millis() - lastBlinkTime >= 500) {
    ledState = !ledState;
    if (ledState) {
      setColor(255, 0, 0); // –ö—Ä–∞—Å–Ω—ã–π
    } else {
      setColor(0, 0, 0);   // –í—ã–∫–ª—é—á–µ–Ω–æ
    }
    lastBlinkTime = millis();
  }
}

void startMonitoring() {
  Serial.println("üöÄ –ù–∞—á–∞–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–≤—É–∫–∞ (20 —Å–µ–∫)");
  systemState = MONITORING;
  monitoringStartTime = millis();
  setColor(0, 255, 0);  // –ó–µ–ª—ë–Ω—ã–π (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)
}

void stopMonitoring() {
  Serial.println("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω");
  systemState = IDLE;
  setColor(0, 0, 255);  // –°–∏–Ω–∏–π (–æ–∂–∏–¥–∞–Ω–∏–µ)
}

void triggerBrokenState() {
  systemState = BROKEN;
  Serial.println("‚ÄºÔ∏è –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ü–û–õ–û–ú–ö–ê! –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—ã—Å–∏–ª–∞ 30%");
}

// –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–≤–µ—Ç–∞ RGB
void setColor(int red, int green, int blue) {
  analogWrite(redPin, red);
  analogWrite(greenPin, green);
  analogWrite(bluePin, blue);
}